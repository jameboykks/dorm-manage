{"ast":null,"code":"import axios from 'axios';\nimport { authService } from './auth.service';\nconst API_URL = 'http://localhost:3001/api';\n\n// Tạo axios instance với interceptor để tự động thêm token vào header\nconst axiosInstance = axios.create({\n  baseURL: API_URL\n});\n\n// Thêm interceptor để tự động thêm token vào header\naxiosInstance.interceptors.request.use(config => {\n  const user = authService.getCurrentUser();\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const roomService = {\n  async registerRoom(roomData) {\n    try {\n      const response = await axiosInstance.post('/rooms', roomData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getAllRooms() {\n    try {\n      const response = await axiosInstance.get('/rooms');\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getRoomById(id) {\n    try {\n      const response = await axiosInstance.get(`/rooms/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async updateRoom(id, roomData) {\n    try {\n      const response = await axiosInstance.put(`/rooms/${id}`, roomData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async deleteRoom(id) {\n    try {\n      const response = await axiosInstance.delete(`/rooms/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi xóa phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  }\n};","map":{"version":3,"names":["axios","authService","API_URL","axiosInstance","create","baseURL","interceptors","request","use","config","user","getCurrentUser","token","headers","Authorization","error","Promise","reject","roomService","registerRoom","roomData","response","post","data","Error","message","getAllRooms","get","getRoomById","id","updateRoom","put","deleteRoom","delete"],"sources":["F:/mentor/ktx/frontend/src/services/room.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth.service';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\n// Tạo axios instance với interceptor để tự động thêm token vào header\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Thêm interceptor để tự động thêm token vào header\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const user = authService.getCurrentUser();\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const roomService = {\r\n  async registerRoom(roomData: any) {\r\n    try {\r\n      const response = await axiosInstance.post('/rooms', roomData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getAllRooms() {\r\n    try {\r\n      const response = await axiosInstance.get('/rooms');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getRoomById(id: number) {\r\n    try {\r\n      const response = await axiosInstance.get(`/rooms/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async updateRoom(id: number, roomData: any) {\r\n    try {\r\n      const response = await axiosInstance.put(`/rooms/${id}`, roomData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async deleteRoom(id: number) {\r\n    try {\r\n      const response = await axiosInstance.delete(`/rooms/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi xóa phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}