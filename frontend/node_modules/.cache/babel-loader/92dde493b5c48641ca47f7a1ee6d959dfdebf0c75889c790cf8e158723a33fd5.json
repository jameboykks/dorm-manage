{"ast":null,"code":"import axiosInstance from './axios.config';\nexport const paymentService = {\n  // Tạo thanh toán mới\n  async createPayment(data) {\n    const response = await axiosInstance.post('/payments', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Lấy danh sách thanh toán của sinh viên\n  async getStudentPayments(studentId) {\n    const response = await axiosInstance.get(`/payments/student/${studentId}`);\n    return response.data;\n  },\n  // Lấy thông tin thanh toán theo ID\n  async getPaymentById(id) {\n    const response = await axiosInstance.get(`/payments/${id}`);\n    return response.data;\n  },\n  // Kiểm tra thanh toán của tháng hiện tại\n  async checkCurrentMonthPayment(studentId) {\n    const response = await axiosInstance.get(`/payments/check-current-month/${studentId}`);\n    return response.data;\n  },\n  // Lấy tất cả thanh toán (cho admin)\n  getAllPayments: async () => {\n    try {\n      const response = await axiosInstance.get('/payments/admin');\n      return response.data;\n    } catch (error) {\n      console.error('Error in getAllPayments:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  // Chấp nhận thanh toán\n  approvePayment: async paymentId => {\n    try {\n      const response = await axiosInstance.post(`/payments/${paymentId}/approve`);\n      return response.data;\n    } catch (error) {\n      console.error('Error in approvePayment:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi chấp nhận thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  // Từ chối thanh toán\n  rejectPayment: async (paymentId, reason) => {\n    try {\n      const response = await axiosInstance.post(`/payments/${paymentId}/reject`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in rejectPayment:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi từ chối thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","paymentService","createPayment","data","response","post","headers","getStudentPayments","studentId","get","getPaymentById","id","checkCurrentMonthPayment","getAllPayments","error","console","Error","message","approvePayment","paymentId","rejectPayment","reason"],"sources":["F:/mentor/ktx - Copy/frontend/src/services/payment.service.ts"],"sourcesContent":["import axiosInstance from './axios.config';\n\nexport const paymentService = {\n  // Tạo thanh toán mới\n  async createPayment(data: FormData) {\n    const response = await axiosInstance.post('/payments', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Lấy danh sách thanh toán của sinh viên\n  async getStudentPayments(studentId: number) {\n    const response = await axiosInstance.get(`/payments/student/${studentId}`);\n    return response.data;\n  },\n\n  // Lấy thông tin thanh toán theo ID\n  async getPaymentById(id: number) {\n    const response = await axiosInstance.get(`/payments/${id}`);\n    return response.data;\n  },\n\n  // Kiểm tra thanh toán của tháng hiện tại\n  async checkCurrentMonthPayment(studentId: number) {\n    const response = await axiosInstance.get(`/payments/check-current-month/${studentId}`);\n    return response.data;\n  },\n\n  // Lấy tất cả thanh toán (cho admin)\n  getAllPayments: async () => {\n    try {\n      const response = await axiosInstance.get('/payments/admin');\n      return response.data;\n    } catch (error: any) {\n      console.error('Error in getAllPayments:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n\n  // Chấp nhận thanh toán\n  approvePayment: async (paymentId: number) => {\n    try {\n      const response = await axiosInstance.post(`/payments/${paymentId}/approve`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error in approvePayment:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi chấp nhận thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n\n  // Từ chối thanh toán\n  rejectPayment: async (paymentId: number, reason: string) => {\n    try {\n      const response = await axiosInstance.post(`/payments/${paymentId}/reject`, { reason });\n      return response.data;\n    } catch (error: any) {\n      console.error('Error in rejectPayment:', error);\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi từ chối thanh toán');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  }\n}; "],"mappings":"AAAA,OAAOA,aAAa,MAAM,gBAAgB;AAE1C,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACA,MAAMC,aAAaA,CAACC,IAAc,EAAE;IAClC,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,WAAW,EAAEF,IAAI,EAAE;MAC3DG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;EACA,MAAMI,kBAAkBA,CAACC,SAAiB,EAAE;IAC1C,MAAMJ,QAAQ,GAAG,MAAMJ,aAAa,CAACS,GAAG,CAAC,qBAAqBD,SAAS,EAAE,CAAC;IAC1E,OAAOJ,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;EACA,MAAMO,cAAcA,CAACC,EAAU,EAAE;IAC/B,MAAMP,QAAQ,GAAG,MAAMJ,aAAa,CAACS,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;IAC3D,OAAOP,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;EACA,MAAMS,wBAAwBA,CAACJ,SAAiB,EAAE;IAChD,MAAMJ,QAAQ,GAAG,MAAMJ,aAAa,CAACS,GAAG,CAAC,iCAAiCD,SAAS,EAAE,CAAC;IACtF,OAAOJ,QAAQ,CAACD,IAAI;EACtB,CAAC;EAED;EACAU,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMJ,aAAa,CAACS,GAAG,CAAC,iBAAiB,CAAC;MAC3D,OAAOL,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOW,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,IAAIA,KAAK,CAACV,QAAQ,EAAE;QAClB,MAAM,IAAIY,KAAK,CAACF,KAAK,CAACV,QAAQ,CAACD,IAAI,CAACc,OAAO,IAAI,kCAAkC,CAAC;MACpF;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED;EACAE,cAAc,EAAE,MAAOC,SAAiB,IAAK;IAC3C,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,aAAac,SAAS,UAAU,CAAC;MAC3E,OAAOf,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOW,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,IAAIA,KAAK,CAACV,QAAQ,EAAE;QAClB,MAAM,IAAIY,KAAK,CAACF,KAAK,CAACV,QAAQ,CAACD,IAAI,CAACc,OAAO,IAAI,8BAA8B,CAAC;MAChF;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED;EACAI,aAAa,EAAE,MAAAA,CAAOD,SAAiB,EAAEE,MAAc,KAAK;IAC1D,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,aAAac,SAAS,SAAS,EAAE;QAAEE;MAAO,CAAC,CAAC;MACtF,OAAOjB,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOW,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,IAAIA,KAAK,CAACV,QAAQ,EAAE;QAClB,MAAM,IAAIY,KAAK,CAACF,KAAK,CAACV,QAAQ,CAACD,IAAI,CAACc,OAAO,IAAI,4BAA4B,CAAC;MAC9E;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}