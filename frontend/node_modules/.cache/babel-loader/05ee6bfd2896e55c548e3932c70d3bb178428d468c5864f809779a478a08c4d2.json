{"ast":null,"code":"import axios from'axios';import{authService}from'./auth.service';const API_URL='http://localhost:3001/api';// Tạo axios instance với interceptor để tự động thêm token vào header\nconst axiosInstance=axios.create({baseURL:API_URL});// Thêm interceptor để tự động thêm token vào header\naxiosInstance.interceptors.request.use(config=>{const user=authService.getCurrentUser();if(user&&user.token){config.headers.Authorization=`Bearer ${user.token}`;}return config;},error=>{return Promise.reject(error);});export const studentService={async registerStudent(studentData){try{const response=await axiosInstance.post('/students',studentData);return response.data;}catch(error){if(error.response){throw new Error(error.response.data.message||'Lỗi khi đăng ký sinh viên');}throw new Error('Không thể kết nối đến server');}},async getAllStudents(){try{const response=await axiosInstance.get('/students');return response.data;}catch(error){if(error.response){throw new Error(error.response.data.message||'Lỗi khi lấy danh sách sinh viên');}throw new Error('Không thể kết nối đến server');}},async getStudentById(id){try{const response=await axiosInstance.get(`/students/${id}`);return response.data;}catch(error){if(error.response){throw new Error(error.response.data.message||'Lỗi khi lấy thông tin sinh viên');}throw new Error('Không thể kết nối đến server');}},async updateStudent(id,studentData){try{const response=await axiosInstance.put(`/students/${id}`,studentData);return response.data;}catch(error){if(error.response){throw new Error(error.response.data.message||'Lỗi khi cập nhật thông tin sinh viên');}throw new Error('Không thể kết nối đến server');}},async deleteStudent(id){try{const response=await axiosInstance.delete(`/students/${id}`);return response.data;}catch(error){if(error.response){throw new Error(error.response.data.message||'Lỗi khi xóa sinh viên');}throw new Error('Không thể kết nối đến server');}}};","map":{"version":3,"names":["axios","authService","API_URL","axiosInstance","create","baseURL","interceptors","request","use","config","user","getCurrentUser","token","headers","Authorization","error","Promise","reject","studentService","registerStudent","studentData","response","post","data","Error","message","getAllStudents","get","getStudentById","id","updateStudent","put","deleteStudent","delete"],"sources":["F:/mentor/ktx/frontend/src/services/student.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth.service';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\n// Tạo axios instance với interceptor để tự động thêm token vào header\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Thêm interceptor để tự động thêm token vào header\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const user = authService.getCurrentUser();\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const studentService = {\r\n  async registerStudent(studentData: any) {\r\n    try {\r\n      const response = await axiosInstance.post('/students', studentData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getAllStudents() {\r\n    try {\r\n      const response = await axiosInstance.get('/students');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getStudentById(id: number) {\r\n    try {\r\n      const response = await axiosInstance.get(`/students/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async updateStudent(id: number, studentData: any) {\r\n    try {\r\n      const response = await axiosInstance.put(`/students/${id}`, studentData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async deleteStudent(id: number) {\r\n    try {\r\n      const response = await axiosInstance.delete(`/students/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi xóa sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}