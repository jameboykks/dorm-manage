{"ast":null,"code":"import axios from 'axios';\nimport { authService } from './auth.service';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add interceptor to add token to requests\naxiosInstance.interceptors.request.use(config => {\n  const token = authService.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nclass NotificationService {\n  async createNotification(data) {\n    return axiosInstance.post('/notifications', data);\n  }\n  async getNotifications() {\n    const response = await axiosInstance.get('/notifications');\n    return response.data;\n  }\n  async getNotificationById(id) {\n    const response = await axiosInstance.get(`/notifications/${id}`);\n    return response.data;\n  }\n  async deleteNotification(id) {\n    return axiosInstance.delete(`/notifications/${id}`);\n  }\n  async markAsRead(id) {\n    return axiosInstance.patch(`/notifications/${id}/read`);\n  }\n}\nexport const notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["axios","authService","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","getToken","Authorization","NotificationService","createNotification","data","post","getNotifications","response","get","getNotificationById","id","deleteNotification","delete","markAsRead","patch","notificationService"],"sources":["F:/mentor/ktx/frontend/src/services/notification.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth.service';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add interceptor to add token to requests\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = authService.getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport interface CreateNotificationDto {\r\n  title: string;\r\n  content: string;\r\n  type: string;\r\n  recipientId: string;\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  type: string;\r\n  isRead: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nclass NotificationService {\r\n  async createNotification(data: CreateNotificationDto) {\r\n    return axiosInstance.post('/notifications', data);\r\n  }\r\n\r\n  async getNotifications(): Promise<Notification[]> {\r\n    const response = await axiosInstance.get('/notifications');\r\n    return response.data;\r\n  }\r\n\r\n  async getNotificationById(id: number): Promise<Notification> {\r\n    const response = await axiosInstance.get(`/notifications/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteNotification(id: number) {\r\n    return axiosInstance.delete(`/notifications/${id}`);\r\n  }\r\n\r\n  async markAsRead(id: number) {\r\n    return axiosInstance.patch(`/notifications/${id}/read`);\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();\r\n\r\nexport default notificationService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAM,CAAC;EACjCC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,KAAK,GAAGb,WAAW,CAACc,QAAQ,CAAC,CAAC;EACpC,IAAID,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACO,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAmBF,MAAMI,mBAAmB,CAAC;EACxB,MAAMC,kBAAkBA,CAACC,IAA2B,EAAE;IACpD,OAAOb,aAAa,CAACc,IAAI,CAAC,gBAAgB,EAAED,IAAI,CAAC;EACnD;EAEA,MAAME,gBAAgBA,CAAA,EAA4B;IAChD,MAAMC,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,GAAG,CAAC,gBAAgB,CAAC;IAC1D,OAAOD,QAAQ,CAACH,IAAI;EACtB;EAEA,MAAMK,mBAAmBA,CAACC,EAAU,EAAyB;IAC3D,MAAMH,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,GAAG,CAAC,kBAAkBE,EAAE,EAAE,CAAC;IAChE,OAAOH,QAAQ,CAACH,IAAI;EACtB;EAEA,MAAMO,kBAAkBA,CAACD,EAAU,EAAE;IACnC,OAAOnB,aAAa,CAACqB,MAAM,CAAC,kBAAkBF,EAAE,EAAE,CAAC;EACrD;EAEA,MAAMG,UAAUA,CAACH,EAAU,EAAE;IAC3B,OAAOnB,aAAa,CAACuB,KAAK,CAAC,kBAAkBJ,EAAE,OAAO,CAAC;EACzD;AACF;AAEA,OAAO,MAAMK,mBAAmB,GAAG,IAAIb,mBAAmB,CAAC,CAAC;AAE5D,eAAea,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}