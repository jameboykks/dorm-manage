{"ast":null,"code":"import axios from 'axios';\nimport { authService } from './auth.service';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  const currentUser = authService.getCurrentUser();\n  if (currentUser !== null && currentUser !== void 0 && currentUser.token) {\n    config.headers.Authorization = `Bearer ${currentUser.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst notificationService = {\n  getNotifications: async () => {\n    const response = await axiosInstance.get('/api/notifications');\n    return response.data;\n  },\n  deleteNotification: async id => {\n    await axiosInstance.delete(`/api/notifications/${id}`);\n  },\n  markAsRead: async id => {\n    await axiosInstance.put(`/api/notifications/${id}/read`);\n  }\n};\nexport default notificationService;","map":{"version":3,"names":["axios","authService","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","currentUser","getCurrentUser","token","Authorization","error","Promise","reject","notificationService","getNotifications","response","get","data","deleteNotification","id","delete","markAsRead","put"],"sources":["F:/mentor/ktx/frontend/src/services/notification.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth.service';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const currentUser = authService.getCurrentUser();\r\n    if (currentUser?.token) {\r\n      config.headers.Authorization = `Bearer ${currentUser.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n  isRead: boolean;\r\n  createdAt: string;\r\n}\r\n\r\nconst notificationService = {\r\n  getNotifications: async (): Promise<Notification[]> => {\r\n    const response = await axiosInstance.get('/api/notifications');\r\n    return response.data;\r\n  },\r\n\r\n  deleteNotification: async (id: number): Promise<void> => {\r\n    await axiosInstance.delete(`/api/notifications/${id}`);\r\n  },\r\n\r\n  markAsRead: async (id: number): Promise<void> => {\r\n    await axiosInstance.put(`/api/notifications/${id}/read`);\r\n  },\r\n};\r\n\r\nexport default notificationService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAM,CAAC;EACjCC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGb,WAAW,CAACc,cAAc,CAAC,CAAC;EAChD,IAAID,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEE,KAAK,EAAE;IACtBH,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,WAAW,CAACE,KAAK,EAAE;EAC9D;EACA,OAAOH,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAUD,MAAMG,mBAAmB,GAAG;EAC1BC,gBAAgB,EAAE,MAAAA,CAAA,KAAqC;IACrD,MAAMC,QAAQ,GAAG,MAAMjB,aAAa,CAACkB,GAAG,CAAC,oBAAoB,CAAC;IAC9D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,kBAAkB,EAAE,MAAOC,EAAU,IAAoB;IACvD,MAAMrB,aAAa,CAACsB,MAAM,CAAC,sBAAsBD,EAAE,EAAE,CAAC;EACxD,CAAC;EAEDE,UAAU,EAAE,MAAOF,EAAU,IAAoB;IAC/C,MAAMrB,aAAa,CAACwB,GAAG,CAAC,sBAAsBH,EAAE,OAAO,CAAC;EAC1D;AACF,CAAC;AAED,eAAeN,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}