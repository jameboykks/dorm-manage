{"ast":null,"code":"import axiosInstance from './axios.config';\nexport const roomService = {\n  async registerRoom(roomData) {\n    try {\n      const response = await axiosInstance.post('/rooms', roomData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getAllRooms() {\n    try {\n      const response = await axiosInstance.get('/rooms');\n      return response.data;\n    } catch (error) {\n      console.error('Error in getAllRooms:', error);\n      if (error.response) {\n        // Server trả về lỗi với status code\n        throw new Error(error.response.data.message || 'Lỗi server');\n      } else if (error.request) {\n        // Không nhận được response từ server\n        throw new Error('Không thể kết nối đến server');\n      } else {\n        // Lỗi khi thiết lập request\n        throw new Error('Lỗi khi gửi yêu cầu');\n      }\n    }\n  },\n  async getRoomById(id) {\n    try {\n      const response = await axiosInstance.get(`/rooms/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async updateRoom(id, roomData) {\n    try {\n      const response = await axiosInstance.put(`/rooms/${id}`, roomData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async deleteRoom(id) {\n    try {\n      const response = await axiosInstance.delete(`/rooms/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi xóa phòng');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","roomService","registerRoom","roomData","response","post","data","error","Error","message","getAllRooms","get","console","request","getRoomById","id","updateRoom","put","deleteRoom","delete"],"sources":["F:/mentor/ktx/frontend/src/services/room.service.ts"],"sourcesContent":["import axiosInstance from './axios.config';\r\nimport { Room } from '../types/room';\r\n\r\nexport const roomService = {\r\n  async registerRoom(roomData: any) {\r\n    try {\r\n      const response = await axiosInstance.post('/rooms', roomData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getAllRooms() {\r\n    try {\r\n      const response = await axiosInstance.get('/rooms');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Error in getAllRooms:', error);\r\n      if (error.response) {\r\n        // Server trả về lỗi với status code\r\n        throw new Error(error.response.data.message || 'Lỗi server');\r\n      } else if (error.request) {\r\n        // Không nhận được response từ server\r\n        throw new Error('Không thể kết nối đến server');\r\n      } else {\r\n        // Lỗi khi thiết lập request\r\n        throw new Error('Lỗi khi gửi yêu cầu');\r\n      }\r\n    }\r\n  },\r\n\r\n  async getRoomById(id: number) {\r\n    try {\r\n      const response = await axiosInstance.get(`/rooms/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async updateRoom(id: number, roomData: any) {\r\n    try {\r\n      const response = await axiosInstance.put(`/rooms/${id}`, roomData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async deleteRoom(id: number) {\r\n    try {\r\n      const response = await axiosInstance.delete(`/rooms/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi xóa phòng');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,aAAa,MAAM,gBAAgB;AAG1C,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,YAAYA,CAACC,QAAa,EAAE;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,QAAQ,EAAEF,QAAQ,CAAC;MAC7D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnB,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,uBAAuB,CAAC;MACzE;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED,MAAME,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,aAAa,CAACW,GAAG,CAAC,QAAQ,CAAC;MAClD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBK,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB;QACA,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,YAAY,CAAC;MAC9D,CAAC,MAAM,IAAIF,KAAK,CAACM,OAAO,EAAE;QACxB;QACA,MAAM,IAAIL,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC,MAAM;QACL;QACA,MAAM,IAAIA,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACF;EACF,CAAC;EAED,MAAMM,WAAWA,CAACC,EAAU,EAAE;IAC5B,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMJ,aAAa,CAACW,GAAG,CAAC,UAAUI,EAAE,EAAE,CAAC;MACxD,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnB,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,6BAA6B,CAAC;MAC/E;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED,MAAMQ,UAAUA,CAACD,EAAU,EAAEZ,QAAa,EAAE;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACiB,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEZ,QAAQ,CAAC;MAClE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnB,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,kCAAkC,CAAC;MACpF;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED,MAAMU,UAAUA,CAACH,EAAU,EAAE;IAC3B,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMJ,aAAa,CAACmB,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;MAC3D,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnB,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,mBAAmB,CAAC;MACrE;MACA,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}