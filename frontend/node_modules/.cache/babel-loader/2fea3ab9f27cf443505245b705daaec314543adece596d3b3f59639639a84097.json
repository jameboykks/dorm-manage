{"ast":null,"code":"import axios from 'axios';\nimport { authService } from './auth.service';\nconst API_URL = 'http://localhost:3001/api';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor\naxiosInstance.interceptors.request.use(config => {\n  const user = authService.getCurrentUser();\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const studentService = {\n  async registerStudent(studentData) {\n    try {\n      const response = await axiosInstance.post('/students', studentData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getAllStudents() {\n    try {\n      const response = await axiosInstance.get('/students');\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getStudentById(id) {\n    try {\n      const response = await axiosInstance.get(`/students/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async getStudentByUserId(userId) {\n    try {\n      const response = await axiosInstance.get(`/students/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async updateStudent(id, studentData) {\n    try {\n      const response = await axiosInstance.put(`/students/${id}`, studentData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async deleteStudent(id) {\n    try {\n      const response = await axiosInstance.delete(`/students/${id}`);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi xóa sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  },\n  async updateStudentProfile(studentData) {\n    try {\n      const response = await axiosInstance.put('/students/profile', studentData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin sinh viên');\n      }\n      throw new Error('Không thể kết nối đến server');\n    }\n  }\n};","map":{"version":3,"names":["axios","authService","API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","user","getCurrentUser","token","Authorization","error","Promise","reject","studentService","registerStudent","studentData","response","post","data","Error","message","getAllStudents","get","getStudentById","id","getStudentByUserId","userId","updateStudent","put","deleteStudent","delete","updateStudentProfile"],"sources":["F:/mentor/ktx - Copy/frontend/src/services/student.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth.service';\r\nimport { RoomAssignmentData } from '../types/room';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const user = authService.getCurrentUser();\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const studentService = {\r\n  async registerStudent(studentData: any) {\r\n    try {\r\n      const response = await axiosInstance.post('/students', studentData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi đăng ký sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getAllStudents() {\r\n    try {\r\n      const response = await axiosInstance.get('/students');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy danh sách sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getStudentById(id: number) {\r\n    try {\r\n      const response = await axiosInstance.get(`/students/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async getStudentByUserId(userId: number) {\r\n    try {\r\n      const response = await axiosInstance.get(`/students/user/${userId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi lấy thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async updateStudent(id: number, studentData: any) {\r\n    try {\r\n      const response = await axiosInstance.put(`/students/${id}`, studentData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async deleteStudent(id: number) {\r\n    try {\r\n      const response = await axiosInstance.delete(`/students/${id}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi xóa sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  },\r\n\r\n  async updateStudentProfile(studentData: any) {\r\n    try {\r\n      const response = await axiosInstance.put('/students/profile', studentData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Lỗi khi cập nhật thông tin sinh viên');\r\n      }\r\n      throw new Error('Không thể kết nối đến server');\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}