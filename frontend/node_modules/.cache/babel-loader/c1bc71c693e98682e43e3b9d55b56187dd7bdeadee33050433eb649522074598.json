{"ast":null,"code":"var _jsxFileName = \"F:\\\\mentor\\\\ktx - Copy\\\\frontend\\\\src\\\\pages\\\\student\\\\AvailableRooms.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Paper, Typography, Grid, Card, CardContent, CardActions, Button, Alert, CircularProgress, Box, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material';\nimport { roomService } from '../../services/room.service';\nimport { roomAssignmentService } from '../../services/roomAssignment.service';\nimport { authService } from '../../services/auth.service';\nimport { studentService } from '../../services/student.service';\nimport BackButton from '../../components/BackButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AvailableRooms = () => {\n  _s();\n  const navigate = useNavigate();\n  const [studentId, setStudentId] = useState(null);\n  const [studentYear, setStudentYear] = useState(null);\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [hasRoomAssignment, setHasRoomAssignment] = useState(false);\n  const [autoRegisterDialogOpen, setAutoRegisterDialogOpen] = useState(false);\n  const [autoRegistering, setAutoRegistering] = useState(false);\n  const [success, setSuccess] = useState('');\n  const [selectedRoomId, setSelectedRoomId] = useState(null);\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n  const currentUser = authService.getCurrentUser();\n\n  // Hàm khởi tạo dữ liệu\n  const initializeData = async userId => {\n    try {\n      var _studentResponse$data;\n      setLoading(true);\n      console.log('Initializing data for user:', userId);\n\n      // Reset các state\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n\n      // Lấy thông tin sinh viên\n      const studentResponse = await studentService.getStudentByUserId(userId);\n      console.log('Student data response:', studentResponse);\n\n      // Kiểm tra cấu trúc response\n      if (!studentResponse) {\n        console.log('No response from student service');\n        setError('Không thể kết nối đến server');\n        setLoading(false);\n        return;\n      }\n\n      // Kiểm tra các trường hợp response khác nhau\n      let studentData;\n      if ((_studentResponse$data = studentResponse.data) !== null && _studentResponse$data !== void 0 && _studentResponse$data.data) {\n        studentData = studentResponse.data.data;\n      } else if (studentResponse.data) {\n        studentData = studentResponse.data;\n      } else {\n        studentData = studentResponse;\n      }\n      console.log('Extracted student data:', studentData);\n      if (!studentData) {\n        console.log('No student data found in response');\n        setError('Không tìm thấy thông tin sinh viên');\n        setLoading(false);\n        return;\n      }\n      if (typeof studentData.year !== 'number') {\n        console.log('Invalid year value:', studentData.year);\n        setError('Thông tin năm học không hợp lệ');\n        setLoading(false);\n        return;\n      }\n      console.log('Setting student data:', {\n        id: studentData.id,\n        year: studentData.year\n      });\n\n      // Cập nhật state và đợi cho đến khi state được cập nhật\n      await new Promise(resolve => {\n        setStudentId(studentData.id);\n        setStudentYear(studentData.year);\n        // Đợi một khoảng thời gian ngắn để state được cập nhật\n        setTimeout(resolve, 100);\n      });\n\n      // Lấy danh sách phòng sau khi state đã được cập nhật\n      await fetchAvailableRooms(studentData.year);\n      await checkRoomAssignment();\n    } catch (err) {\n      console.error('Error initializing data:', err);\n      setError('Không thể tải thông tin sinh viên');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // useEffect để xử lý khi component mount và khi currentUser thay đổi\n  useEffect(() => {\n    const currentUserId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.user.id;\n    console.log('Current user ID:', currentUserId);\n    if (currentUserId) {\n      initializeData(currentUserId);\n    } else {\n      // Reset tất cả state khi không có user\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n      setLoading(false);\n    };\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.user.id]); // Chỉ phụ thuộc vào user.id\n\n  // Thêm useEffect để lưu trữ state vào localStorage\n  useEffect(() => {\n    if (studentId && studentYear) {\n      localStorage.setItem('studentData', JSON.stringify({\n        studentId,\n        studentYear,\n        rooms\n      }));\n    }\n  }, [studentId, studentYear, rooms]);\n\n  // Thêm useEffect để khôi phục state từ localStorage khi component mount\n  useEffect(() => {\n    const savedData = localStorage.getItem('studentData');\n    if (savedData) {\n      try {\n        const {\n          studentId: savedStudentId,\n          studentYear: savedStudentYear,\n          rooms: savedRooms\n        } = JSON.parse(savedData);\n        if (savedStudentId && savedStudentYear) {\n          setStudentId(savedStudentId);\n          setStudentYear(savedStudentYear);\n          setRooms(savedRooms || []);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error restoring state from localStorage:', error);\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const checkRoomAssignment = async () => {\n    try {\n      if (!(currentUser !== null && currentUser !== void 0 && currentUser.user.id)) return;\n\n      // Lấy thông tin sinh viên\n      const studentResponse = await studentService.getStudentByUserId(currentUser.user.id);\n      const studentId = studentResponse.data.id;\n\n      // Lấy danh sách yêu cầu đăng ký phòng\n      const assignmentsResponse = await roomAssignmentService.getRoomAssignments();\n      const assignments = assignmentsResponse.data || [];\n\n      // Kiểm tra xem sinh viên có yêu cầu đăng ký đang chờ hoặc đã có phòng không\n      const hasAssignment = assignments.some(assignment => assignment.studentId === studentId && (assignment.status === 'pending' || assignment.status === 'active'));\n      setHasRoomAssignment(hasAssignment);\n    } catch (err) {\n      console.error('Error checking room assignment:', err);\n    }\n  };\n  const fetchAvailableRooms = async year => {\n    try {\n      var _studentResponse$data2;\n      setLoading(true);\n      setError('');\n      const studentYearToUse = year !== null && year !== void 0 ? year : studentYear;\n      console.log('Fetching available rooms for student year:', studentYearToUse);\n      if (studentYearToUse === null) {\n        console.log('Student year is null, skipping room fetch');\n        setLoading(false);\n        return;\n      }\n      const response = await roomService.getAllRooms();\n      console.log('Raw API response:', response);\n\n      // Kiểm tra cấu trúc dữ liệu trả về\n      let allRooms = [];\n      if (response && response.data) {\n        // Nếu API trả về dữ liệu trong thuộc tính data\n        allRooms = Array.isArray(response.data) ? response.data : [];\n        console.log('Extracted rooms from response.data:', allRooms);\n      } else if (Array.isArray(response)) {\n        // Nếu API trả về trực tiếp một mảng\n        allRooms = response;\n        console.log('Using response directly as rooms array:', allRooms);\n      } else {\n        console.error('Unexpected API response format:', response);\n        setError('Định dạng dữ liệu không hợp lệ');\n        setRooms([]);\n        setLoading(false);\n        return;\n      }\n      console.log('All Rooms Before Filter:', allRooms);\n\n      // Lấy thông tin sinh viên để kiểm tra giới tính\n      const studentResponse = await studentService.getStudentByUserId((currentUser === null || currentUser === void 0 ? void 0 : currentUser.user.id) || 0);\n      const studentData = ((_studentResponse$data2 = studentResponse.data) === null || _studentResponse$data2 === void 0 ? void 0 : _studentResponse$data2.data) || studentResponse.data;\n      const studentGender = studentData === null || studentData === void 0 ? void 0 : studentData.gender;\n      console.log('Student gender:', studentGender);\n\n      // Lọc các phòng còn trống và phù hợp với năm học của sinh viên\n      const availableRooms = allRooms.filter(room => {\n        // Log chi tiết từng phòng trước khi lọc\n        console.log('Checking room:', {\n          roomId: room.id,\n          roomNumber: room.roomNumber,\n          building: room.building,\n          floor: room.floor,\n          status: room.status,\n          currentOccupancy: room.currentOccupancy,\n          capacity: room.capacity,\n          studentYear: studentYearToUse,\n          studentGender: studentGender\n        });\n        const isAvailable = room.status === 'available' || room.status === 'Đã có Người ở';\n        const hasSpace = room.currentOccupancy < room.capacity;\n\n        // Kiểm tra building dựa trên giới tính\n        let isMatchingBuilding = true;\n        if (studentGender) {\n          isMatchingBuilding = studentGender === 'Nam' && room.building === 'R1' || studentGender === 'Nữ' && room.building === 'R2';\n        }\n\n        // Kiểm tra tầng dựa trên năm học\n        let isMatchingFloor = true;\n        if (studentYearToUse && room.floor) {\n          // Năm 1 -> tầng 1, năm 2 -> tầng 2, năm 3 -> tầng 3, năm 4 -> tầng 4\n          isMatchingFloor = parseInt(room.floor) === parseInt(studentYearToUse.toString());\n        }\n        console.log('Room conditions:', {\n          roomNumber: room.roomNumber,\n          isAvailable,\n          hasSpace,\n          isMatchingBuilding,\n          isMatchingFloor,\n          willBeIncluded: isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor\n        });\n        return isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor;\n      });\n      console.log('Available Rooms After Filter:', availableRooms);\n      setRooms(availableRooms);\n      if (availableRooms.length === 0) {\n        setError(`Hiện không có phòng nào khả dụng cho sinh viên năm ${studentYearToUse}`);\n      }\n    } catch (error) {\n      console.error('Error fetching rooms:', error);\n      setError(error.message || 'Có lỗi xảy ra khi tải danh sách phòng');\n      setRooms([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRegisterRoom = roomId => {\n    setSelectedRoomId(roomId);\n    setConfirmDialogOpen(true);\n  };\n  const handleConfirmRegister = async () => {\n    if (!selectedRoomId || !studentId) {\n      setError('Thông tin không hợp lệ');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n\n      // Tạo yêu cầu đăng ký phòng với trạng thái pending\n      await roomAssignmentService.assignRoom({\n        roomId: selectedRoomId,\n        studentId: studentId,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: '',\n        isAdmin: false // Đăng ký thủ công cần xét duyệt\n      });\n      setSuccess('Yêu cầu đăng ký phòng đã được gửi và đang chờ xét duyệt');\n      setConfirmDialogOpen(false);\n      setSelectedRoomId(null);\n\n      // Cập nhật lại trạng thái\n      await checkRoomAssignment();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Không thể gửi yêu cầu đăng ký phòng');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAutoRegister = async () => {\n    if (!studentId) {\n      setError('Không tìm thấy thông tin sinh viên');\n      return;\n    }\n    setAutoRegistering(true);\n    setError('');\n    setSuccess('');\n    try {\n      var _studentResponse$data3;\n      // Lấy thông tin sinh viên để kiểm tra giới tính và năm học\n      const studentResponse = await studentService.getStudentByUserId((currentUser === null || currentUser === void 0 ? void 0 : currentUser.user.id) || 0);\n      const studentData = ((_studentResponse$data3 = studentResponse.data) === null || _studentResponse$data3 === void 0 ? void 0 : _studentResponse$data3.data) || studentResponse.data;\n      const studentGender = studentData === null || studentData === void 0 ? void 0 : studentData.gender;\n      const studentYear = studentData === null || studentData === void 0 ? void 0 : studentData.year;\n\n      // Tìm phòng còn trống phù hợp với giới tính và năm học của sinh viên\n      const availableRoom = rooms.find(room => {\n        const isAvailable = room.status === 'available' || room.status === 'Đã có Người ở' && room.currentOccupancy < room.capacity;\n        const hasSpace = room.currentOccupancy < room.capacity;\n\n        // Kiểm tra building dựa trên giới tính\n        let isMatchingBuilding = true;\n        if (studentGender) {\n          isMatchingBuilding = studentGender === 'Nam' && room.building === 'R1' || studentGender === 'Nữ' && room.building === 'R2';\n        }\n\n        // Kiểm tra tầng dựa trên năm học\n        let isMatchingFloor = true;\n        if (studentYear && room.floor) {\n          // Năm 1 -> tầng 1, năm 2 -> tầng 2, năm 3 -> tầng 3, năm 4 -> tầng 4\n          isMatchingFloor = parseInt(room.floor) === parseInt(studentYear.toString());\n        }\n        return isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor;\n      });\n      if (!availableRoom) {\n        setError('Hiện không có phòng nào khả dụng phù hợp với giới tính và năm học của bạn');\n        return;\n      }\n\n      // Đăng ký phòng tự động - không cần xét duyệt\n      await roomAssignmentService.assignRoom({\n        roomId: availableRoom.id,\n        studentId: studentId,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: '',\n        isAdmin: true // Đăng ký tự động không cần xét duyệt\n      });\n      setSuccess(`Đã đăng ký thành công vào phòng ${availableRoom.building} - ${availableRoom.roomNumber}`);\n      setAutoRegisterDialogOpen(false);\n      navigate('/student/home');\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Không thể đăng ký phòng tự động');\n    } finally {\n      setAutoRegistering(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 4,\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: 3,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            gutterBottom: true,\n            children: \"Danh s\\xE1ch ph\\xF2ng c\\xF3 s\\u1EB5n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => setAutoRegisterDialogOpen(true),\n          disabled: hasRoomAssignment || rooms.length === 0,\n          children: \"\\u0110\\u0103ng k\\xFD t\\u1EF1 \\u0111\\u1ED9ng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 2\n        },\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this), hasRoomAssignment && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        sx: {\n          mb: 2\n        },\n        children: \"B\\u1EA1n \\u0111\\xE3 c\\xF3 y\\xEAu c\\u1EA7u \\u0111\\u0103ng k\\xFD ph\\xF2ng \\u0111ang ch\\u1EDD ph\\xEA duy\\u1EC7t ho\\u1EB7c \\u0111\\xE3 \\u0111\\u01B0\\u1EE3c g\\xE1n ph\\xF2ng.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: rooms.map(room => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: [\"Ph\\xF2ng \", room.roomNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: [\"T\\xF2a \", room.building]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [\"Lo\\u1EA1i ph\\xF2ng: \", room.type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [\"Gi\\xE1 ph\\xF2ng: \", room.price.toLocaleString('vi-VN'), \" VN\\u0110/th\\xE1ng\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: [\"S\\u1EE9c ch\\u1EE9a: \", room.currentOccupancy, \"/\", room.capacity]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"primary\",\n                children: [\"Tr\\u1EA1ng th\\xE1i: \", room.status]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: () => handleRegisterRoom(room.id),\n                disabled: hasRoomAssignment,\n                children: \"\\u0110\\u0103ng k\\xFD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)\n        }, room.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: autoRegisterDialogOpen,\n      onClose: () => !autoRegistering && setAutoRegisterDialogOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"X\\xE1c nh\\u1EADn \\u0111\\u0103ng k\\xFD t\\u1EF1 \\u0111\\u1ED9ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"H\\u1EC7 th\\u1ED1ng s\\u1EBD t\\u1EF1 \\u0111\\u1ED9ng \\u0111\\u0103ng k\\xFD b\\u1EA1n v\\xE0o ph\\xF2ng c\\xF2n tr\\u1ED1ng \\u0111\\u1EA7u ti\\xEAn ph\\xF9 h\\u1EE3p v\\u1EDBi gi\\u1EDBi t\\xEDnh v\\xE0 n\\u0103m h\\u1ECDc c\\u1EE7a b\\u1EA1n. B\\u1EA1n c\\xF3 ch\\u1EAFc ch\\u1EAFn mu\\u1ED1n ti\\u1EBFp t\\u1EE5c?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setAutoRegisterDialogOpen(false),\n          disabled: autoRegistering,\n          children: \"H\\u1EE7y\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAutoRegister,\n          color: \"primary\",\n          disabled: autoRegistering,\n          autoFocus: true,\n          children: autoRegistering ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 32\n          }, this) : 'Xác nhận'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: confirmDialogOpen,\n      onClose: () => !loading && setConfirmDialogOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"X\\xE1c nh\\u1EADn \\u0111\\u0103ng k\\xFD ph\\xF2ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Y\\xEAu c\\u1EA7u \\u0111\\u0103ng k\\xFD ph\\xF2ng c\\u1EE7a b\\u1EA1n s\\u1EBD \\u0111\\u01B0\\u1EE3c g\\u1EEDi \\u0111\\u1EC3 x\\xE9t duy\\u1EC7t. B\\u1EA1n c\\xF3 ch\\u1EAFc ch\\u1EAFn mu\\u1ED1n ti\\u1EBFp t\\u1EE5c?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setConfirmDialogOpen(false),\n          disabled: loading,\n          children: \"H\\u1EE7y\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmRegister,\n          color: \"primary\",\n          disabled: loading,\n          autoFocus: true,\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 24\n          }, this) : 'Xác nhận'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 5\n  }, this);\n};\n_s(AvailableRooms, \"SmGr9MqoWSnxyZwd6fPURiZRBjw=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailableRooms;\nexport default AvailableRooms;\nvar _c;\n$RefreshReg$(_c, \"AvailableRooms\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Container","Paper","Typography","Grid","Card","CardContent","CardActions","Button","Alert","CircularProgress","Box","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","roomService","roomAssignmentService","authService","studentService","BackButton","jsxDEV","_jsxDEV","AvailableRooms","_s","navigate","studentId","setStudentId","studentYear","setStudentYear","rooms","setRooms","loading","setLoading","error","setError","hasRoomAssignment","setHasRoomAssignment","autoRegisterDialogOpen","setAutoRegisterDialogOpen","autoRegistering","setAutoRegistering","success","setSuccess","selectedRoomId","setSelectedRoomId","confirmDialogOpen","setConfirmDialogOpen","currentUser","getCurrentUser","initializeData","userId","_studentResponse$data","console","log","studentResponse","getStudentByUserId","studentData","data","year","id","Promise","resolve","setTimeout","fetchAvailableRooms","checkRoomAssignment","err","currentUserId","user","localStorage","setItem","JSON","stringify","savedData","getItem","savedStudentId","savedStudentYear","savedRooms","parse","assignmentsResponse","getRoomAssignments","assignments","hasAssignment","some","assignment","status","_studentResponse$data2","studentYearToUse","response","getAllRooms","allRooms","Array","isArray","studentGender","gender","availableRooms","filter","room","roomId","roomNumber","building","floor","currentOccupancy","capacity","isAvailable","hasSpace","isMatchingBuilding","isMatchingFloor","parseInt","toString","willBeIncluded","length","message","handleRegisterRoom","handleConfirmRegister","assignRoom","startDate","Date","toISOString","split","endDate","isAdmin","_err$response","_err$response$data","handleAutoRegister","_studentResponse$data3","availableRoom","find","_err$response2","_err$response2$data","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","sx","p","mt","mb","variant","gutterBottom","color","onClick","disabled","severity","container","spacing","map","item","xs","sm","md","type","price","toLocaleString","size","open","onClose","autoFocus","_c","$RefreshReg$"],"sources":["F:/mentor/ktx - Copy/frontend/src/pages/student/AvailableRooms.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Alert,\n  CircularProgress,\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions\n} from '@mui/material';\nimport { roomService } from '../../services/room.service';\nimport { roomAssignmentService } from '../../services/roomAssignment.service';\nimport { Room } from '../../types/room';\nimport { authService } from '../../services/auth.service';\nimport { studentService } from '../../services/student.service';\nimport BackButton from '../../components/BackButton';\n\ninterface StudentData {\n  id: number;\n  studentId: string;\n  fullName: string;\n  dateOfBirth: string;\n  gender: string;\n  address: string;\n  phone: string;\n  email: string;\n  year: number;\n  userId: number;\n  userData?: {\n    id: number;\n    username: string;\n    email: string | null;\n    role: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface StudentResponse {\n  success: boolean;\n  data: StudentData;\n}\n\nexport const AvailableRooms: React.FC = () => {\n  const navigate = useNavigate();\n  const [studentId, setStudentId] = useState<number | null>(null);\n  const [studentYear, setStudentYear] = useState<number | null>(null);\n  const [rooms, setRooms] = useState<Room[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [hasRoomAssignment, setHasRoomAssignment] = useState(false);\n  const [autoRegisterDialogOpen, setAutoRegisterDialogOpen] = useState(false);\n  const [autoRegistering, setAutoRegistering] = useState(false);\n  const [success, setSuccess] = useState('');\n  const [selectedRoomId, setSelectedRoomId] = useState<number | null>(null);\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n  const currentUser = authService.getCurrentUser();\n\n  // Hàm khởi tạo dữ liệu\n  const initializeData = async (userId: number) => {\n    try {\n      setLoading(true);\n      console.log('Initializing data for user:', userId);\n      \n      // Reset các state\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n      \n      // Lấy thông tin sinh viên\n      const studentResponse = await studentService.getStudentByUserId(userId);\n      console.log('Student data response:', studentResponse);\n      \n      // Kiểm tra cấu trúc response\n      if (!studentResponse) {\n        console.log('No response from student service');\n        setError('Không thể kết nối đến server');\n        setLoading(false);\n        return;\n      }\n\n      // Kiểm tra các trường hợp response khác nhau\n      let studentData: StudentData;\n      if (studentResponse.data?.data) {\n        studentData = studentResponse.data.data as StudentData;\n      } else if (studentResponse.data) {\n        studentData = studentResponse.data as StudentData;\n      } else {\n        studentData = studentResponse as unknown as StudentData;\n      }\n\n      console.log('Extracted student data:', studentData);\n\n      if (!studentData) {\n        console.log('No student data found in response');\n        setError('Không tìm thấy thông tin sinh viên');\n        setLoading(false);\n        return;\n      }\n\n      if (typeof studentData.year !== 'number') {\n        console.log('Invalid year value:', studentData.year);\n        setError('Thông tin năm học không hợp lệ');\n        setLoading(false);\n        return;\n      }\n\n      console.log('Setting student data:', {\n        id: studentData.id,\n        year: studentData.year\n      });\n\n      // Cập nhật state và đợi cho đến khi state được cập nhật\n      await new Promise<void>((resolve) => {\n        setStudentId(studentData.id);\n        setStudentYear(studentData.year);\n        // Đợi một khoảng thời gian ngắn để state được cập nhật\n        setTimeout(resolve, 100);\n      });\n\n      // Lấy danh sách phòng sau khi state đã được cập nhật\n      await fetchAvailableRooms(studentData.year);\n      await checkRoomAssignment();\n    } catch (err: any) {\n      console.error('Error initializing data:', err);\n      setError('Không thể tải thông tin sinh viên');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // useEffect để xử lý khi component mount và khi currentUser thay đổi\n  useEffect(() => {\n    const currentUserId = currentUser?.user.id;\n    console.log('Current user ID:', currentUserId);\n\n    if (currentUserId) {\n      initializeData(currentUserId);\n    } else {\n      // Reset tất cả state khi không có user\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      setStudentId(null);\n      setStudentYear(null);\n      setRooms([]);\n      setError('');\n      setHasRoomAssignment(false);\n      setAutoRegisterDialogOpen(false);\n      setAutoRegistering(false);\n      setSuccess('');\n      setLoading(false);\n    };\n  }, [currentUser?.user.id]); // Chỉ phụ thuộc vào user.id\n\n  // Thêm useEffect để lưu trữ state vào localStorage\n  useEffect(() => {\n    if (studentId && studentYear) {\n      localStorage.setItem('studentData', JSON.stringify({\n        studentId,\n        studentYear,\n        rooms\n      }));\n    }\n  }, [studentId, studentYear, rooms]);\n\n  // Thêm useEffect để khôi phục state từ localStorage khi component mount\n  useEffect(() => {\n    const savedData = localStorage.getItem('studentData');\n    if (savedData) {\n      try {\n        const { studentId: savedStudentId, studentYear: savedStudentYear, rooms: savedRooms } = JSON.parse(savedData);\n        if (savedStudentId && savedStudentYear) {\n          setStudentId(savedStudentId);\n          setStudentYear(savedStudentYear);\n          setRooms(savedRooms || []);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error restoring state from localStorage:', error);\n        setLoading(false);\n    }\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const checkRoomAssignment = async () => {\n    try {\n      if (!currentUser?.user.id) return;\n      \n      // Lấy thông tin sinh viên\n      const studentResponse = await studentService.getStudentByUserId(currentUser.user.id);\n      const studentId = studentResponse.data.id;\n\n      // Lấy danh sách yêu cầu đăng ký phòng\n      const assignmentsResponse = await roomAssignmentService.getRoomAssignments();\n      const assignments = assignmentsResponse.data || [];\n\n      // Kiểm tra xem sinh viên có yêu cầu đăng ký đang chờ hoặc đã có phòng không\n      const hasAssignment = assignments.some((assignment: any) => \n        assignment.studentId === studentId && \n        (assignment.status === 'pending' || assignment.status === 'active')\n      );\n\n      setHasRoomAssignment(hasAssignment);\n    } catch (err: any) {\n      console.error('Error checking room assignment:', err);\n    }\n  };\n\n  const fetchAvailableRooms = async (year?: number) => {\n    try {\n      setLoading(true);\n      setError('');\n      const studentYearToUse = year ?? studentYear;\n      console.log('Fetching available rooms for student year:', studentYearToUse);\n      \n      if (studentYearToUse === null) {\n        console.log('Student year is null, skipping room fetch');\n        setLoading(false);\n        return;\n      }\n      \n      const response = await roomService.getAllRooms();\n      console.log('Raw API response:', response);\n      \n      // Kiểm tra cấu trúc dữ liệu trả về\n      let allRooms: Room[] = [];\n      \n      if (response && response.data) {\n        // Nếu API trả về dữ liệu trong thuộc tính data\n        allRooms = Array.isArray(response.data) ? response.data : [];\n        console.log('Extracted rooms from response.data:', allRooms);\n      } else if (Array.isArray(response)) {\n        // Nếu API trả về trực tiếp một mảng\n        allRooms = response;\n        console.log('Using response directly as rooms array:', allRooms);\n      } else {\n        console.error('Unexpected API response format:', response);\n        setError('Định dạng dữ liệu không hợp lệ');\n        setRooms([]);\n        setLoading(false);\n        return;\n      }\n\n      console.log('All Rooms Before Filter:', allRooms);\n\n      // Lấy thông tin sinh viên để kiểm tra giới tính\n      const studentResponse = await studentService.getStudentByUserId(currentUser?.user.id || 0);\n      const studentData = studentResponse.data?.data || studentResponse.data;\n      const studentGender = studentData?.gender;\n\n      console.log('Student gender:', studentGender);\n\n      // Lọc các phòng còn trống và phù hợp với năm học của sinh viên\n      const availableRooms = allRooms.filter((room: Room) => {\n        // Log chi tiết từng phòng trước khi lọc\n        console.log('Checking room:', {\n          roomId: room.id,\n          roomNumber: room.roomNumber,\n          building: room.building,\n          floor: room.floor,\n          status: room.status,\n          currentOccupancy: room.currentOccupancy,\n          capacity: room.capacity,\n          studentYear: studentYearToUse,\n          studentGender: studentGender\n        });\n\n        const isAvailable = room.status === 'available' || room.status === 'Đã có Người ở';\n        const hasSpace = room.currentOccupancy < room.capacity;\n        \n        // Kiểm tra building dựa trên giới tính\n        let isMatchingBuilding = true;\n        if (studentGender) {\n          isMatchingBuilding = (studentGender === 'Nam' && room.building === 'R1') || \n                             (studentGender === 'Nữ' && room.building === 'R2');\n        }\n        \n        // Kiểm tra tầng dựa trên năm học\n        let isMatchingFloor = true;\n        if (studentYearToUse && room.floor) {\n          // Năm 1 -> tầng 1, năm 2 -> tầng 2, năm 3 -> tầng 3, năm 4 -> tầng 4\n          isMatchingFloor = parseInt(room.floor) === parseInt(studentYearToUse.toString());\n        }\n        \n        console.log('Room conditions:', {\n          roomNumber: room.roomNumber,\n          isAvailable,\n          hasSpace,\n          isMatchingBuilding,\n          isMatchingFloor,\n          willBeIncluded: isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor\n        });\n        \n        return isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor;\n      });\n      \n      console.log('Available Rooms After Filter:', availableRooms);\n      \n      setRooms(availableRooms);\n      if (availableRooms.length === 0) {\n        setError(`Hiện không có phòng nào khả dụng cho sinh viên năm ${studentYearToUse}`);\n      }\n    } catch (error: any) {\n      console.error('Error fetching rooms:', error);\n      setError(error.message || 'Có lỗi xảy ra khi tải danh sách phòng');\n      setRooms([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegisterRoom = (roomId: number) => {\n    setSelectedRoomId(roomId);\n    setConfirmDialogOpen(true);\n  };\n\n  const handleConfirmRegister = async () => {\n    if (!selectedRoomId || !studentId) {\n      setError('Thông tin không hợp lệ');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n      \n      // Tạo yêu cầu đăng ký phòng với trạng thái pending\n      await roomAssignmentService.assignRoom({\n        roomId: selectedRoomId,\n        studentId: studentId,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: '',\n        isAdmin: false // Đăng ký thủ công cần xét duyệt\n      });\n\n      setSuccess('Yêu cầu đăng ký phòng đã được gửi và đang chờ xét duyệt');\n      setConfirmDialogOpen(false);\n      setSelectedRoomId(null);\n      \n      // Cập nhật lại trạng thái\n      await checkRoomAssignment();\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Không thể gửi yêu cầu đăng ký phòng');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAutoRegister = async () => {\n    if (!studentId) {\n      setError('Không tìm thấy thông tin sinh viên');\n      return;\n    }\n\n    setAutoRegistering(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // Lấy thông tin sinh viên để kiểm tra giới tính và năm học\n      const studentResponse = await studentService.getStudentByUserId(currentUser?.user.id || 0);\n      const studentData = studentResponse.data?.data || studentResponse.data;\n      const studentGender = studentData?.gender;\n      const studentYear = studentData?.year;\n      \n      // Tìm phòng còn trống phù hợp với giới tính và năm học của sinh viên\n      const availableRoom = rooms.find(room => {\n        const isAvailable = room.status === 'available' || \n          (room.status === 'Đã có Người ở' && room.currentOccupancy < room.capacity);\n        const hasSpace = room.currentOccupancy < room.capacity;\n        \n        // Kiểm tra building dựa trên giới tính\n        let isMatchingBuilding = true;\n        if (studentGender) {\n          isMatchingBuilding = (studentGender === 'Nam' && room.building === 'R1') || \n                             (studentGender === 'Nữ' && room.building === 'R2');\n        }\n        \n        // Kiểm tra tầng dựa trên năm học\n        let isMatchingFloor = true;\n        if (studentYear && room.floor) {\n          // Năm 1 -> tầng 1, năm 2 -> tầng 2, năm 3 -> tầng 3, năm 4 -> tầng 4\n          isMatchingFloor = parseInt(room.floor) === parseInt(studentYear.toString());\n        }\n        \n        return isAvailable && hasSpace && isMatchingBuilding && isMatchingFloor;\n      });\n\n      if (!availableRoom) {\n        setError('Hiện không có phòng nào khả dụng phù hợp với giới tính và năm học của bạn');\n        return;\n      }\n\n      // Đăng ký phòng tự động - không cần xét duyệt\n      await roomAssignmentService.assignRoom({\n        roomId: availableRoom.id,\n        studentId: studentId,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: '',\n        isAdmin: true // Đăng ký tự động không cần xét duyệt\n      });\n\n      setSuccess(`Đã đăng ký thành công vào phòng ${availableRoom.building} - ${availableRoom.roomNumber}`);\n      setAutoRegisterDialogOpen(false);\n      navigate('/student/home');\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Không thể đăng ký phòng tự động');\n    } finally {\n      setAutoRegistering(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper sx={{ p: 4, mt: 4 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n          <Box>\n            <BackButton />\n          <Typography variant=\"h4\" gutterBottom>\n              Danh sách phòng có sẵn\n          </Typography>\n          </Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setAutoRegisterDialogOpen(true)}\n            disabled={hasRoomAssignment || rooms.length === 0}\n          >\n            Đăng ký tự động\n          </Button>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n\n        {hasRoomAssignment && (\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            Bạn đã có yêu cầu đăng ký phòng đang chờ phê duyệt hoặc đã được gán phòng.\n          </Alert>\n        )}\n\n        <Grid container spacing={3}>\n          {rooms.map((room) => (\n            <Grid item xs={12} sm={6} md={4} key={room.id}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Phòng {room.roomNumber}\n                  </Typography>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Tòa {room.building}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Loại phòng: {room.type}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Giá phòng: {room.price.toLocaleString('vi-VN')} VNĐ/tháng\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Sức chứa: {room.currentOccupancy}/{room.capacity}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"primary\">\n                    Trạng thái: {room.status}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button \n                    size=\"small\" \n                    color=\"primary\"\n                    onClick={() => handleRegisterRoom(room.id)}\n                    disabled={hasRoomAssignment}\n                  >\n                    Đăng ký\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n\n      {/* Dialog xác nhận đăng ký tự động */}\n      <Dialog\n        open={autoRegisterDialogOpen}\n        onClose={() => !autoRegistering && setAutoRegisterDialogOpen(false)}\n      >\n        <DialogTitle>Xác nhận đăng ký tự động</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Hệ thống sẽ tự động đăng ký bạn vào phòng còn trống đầu tiên phù hợp với giới tính và năm học của bạn. Bạn có chắc chắn muốn tiếp tục?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setAutoRegisterDialogOpen(false)} \n            disabled={autoRegistering}\n          >\n            Hủy\n          </Button>\n          <Button \n            onClick={handleAutoRegister} \n            color=\"primary\" \n            disabled={autoRegistering}\n            autoFocus\n          >\n            {autoRegistering ? <CircularProgress size={24} /> : 'Xác nhận'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Dialog xác nhận đăng ký thủ công */}\n      <Dialog\n        open={confirmDialogOpen}\n        onClose={() => !loading && setConfirmDialogOpen(false)}\n      >\n        <DialogTitle>Xác nhận đăng ký phòng</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Yêu cầu đăng ký phòng của bạn sẽ được gửi để xét duyệt. Bạn có chắc chắn muốn tiếp tục?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setConfirmDialogOpen(false)} \n            disabled={loading}\n          >\n            Hủy\n          </Button>\n          <Button \n            onClick={handleConfirmRegister} \n            color=\"primary\" \n            disabled={loading}\n            autoFocus\n          >\n            {loading ? <CircularProgress size={24} /> : 'Xác nhận'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}; \n\nexport default AvailableRooms; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}